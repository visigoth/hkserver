syntax = "proto3";
package org.hkserver;

message NameUuidPair {
  string name = 1;
  string uuid = 2;
}

message Number {
  oneof value {
    int64 signed_integer_value = 1;
    uint64 unsigned_integer_value = 2;
    float float_value = 3;
    double double_value = 4;
  }
}

message NumberRange {
  /* optional */ Number min_value = 1;
  /* optional */ Number max_value = 2;
}

message Value {
  oneof value {
    bool bool_value = 1;
    string string_value = 2;
    Number number_value = 3;
    bytes data_value = 4;
    // TODO: figure out array and dictionary values
  }
}

message AccessoryProfileInformation {
  string uuid = 1;
  repeated NameUuidPair services = 2;
  bool is_network_access_restricted = 3;
}

enum ServiceType {
  INVALID_SERVICE_TYPE = 0;
  LIGHT_BULB = 1;
  LIGHT_SENSOR = 2;
  SWITCH = 3;
  BATTERY = 4;
  OUTLET = 5;
  STATEFUL_PROGRAMMABLE_SWITCH = 6;
  STATELESS_PROGRAMMABLE_SWITCH = 7;
  AIR_PURIFIER = 8;
  AIR_QUALITY_SENSOR = 9;
  CARBON_DIOXIDE_SENSOR = 10;
  CARBON_MONOXIDE_SENSOR = 11;
  SMOKE_SENSOR = 12;
  HEATER_COOLER = 13;
  TEMPERATURE_SENSOR = 14;
  THERMOSTAT = 15;
  FAN = 16;
  FILTER_MAINTENANCE = 17;
  HUMIDIFIER_DEHUMIDIFIER = 18;
  HUMIDITY_SENSOR = 19;
  VENTILATION_FAN = 20;
  WINDOW = 21;
  WINDOW_COVERING = 22;
  SLATS = 23;
  FAUCET = 24;
  VALVE = 25;
  IRRIGATION_SYSTEM = 26;
  LEAK_SENSOR = 27;
  DOOR = 28;
  DOORBELL = 29;
  GARAGE_DOOR_OPENER = 30;
  LOCK_MANAGEMENT = 31;
  LOCK_MECHANISM = 32;
  MOTION_SENSOR = 33;
  OCCUPANCY_SENSOR = 34;
  SECURITY_SYSTEM = 35;
  CONTACT_SENSOR = 36;
  CAMERA_CONTROL = 37;
  CAMERA_RTP_STREAM_MANAGEMENT = 38;
  MICROPHONE = 39;
  SPEAKER = 40;
  LABEL = 41;
  ACCESSORY_INFORMATION = 42;
}

message CharacteristicInformation {
  enum Property {
    INVALID_PROPERTY = 0;
    READABLE = 1;
    WRITABLE = 2;
    SUPPORTS_EVENT = 3;
    HIDDEN = 4;
  }

  enum CharacteristicType {
    /* unavailable on mac catalyst
     * MANUFACTURER = 2;
     * MODEL = 3;
     * SERIAL_NUMBER = 4;
     * FIRMWARE_VERSION = 26;
     */
    INVALID_CHARACTERISTIC_TYPE = 0;
    TARGET_RELATIVE_HUMIDITY = 1;
    IDENTIFY = 2;
    OUTLET_IN_USE = 3;
    LOGS = 4;
    AUDIO_FEEDBACK = 5;
    ADMIN_ONLY_ACCESS = 6;
    SECURITY_SYSTEM_ALARM_TYPE = 7;
    MOTION_DETECTED = 8;
    LOCK_MECHANISM_LAST_KNOWN_ACTION = 9;
    LOCK_MANAGEMENT_CONTROL_POINT = 10;
    LOCK_MANAGEMENT_AUTO_SECURE_TIMEOUT = 11;
    AIR_PARTICULATE_DENSITY = 12;
    AIR_PARTICULATE_SIZE = 13;
    AIR_QUALITY = 14;
    CARBON_DIOXIDE_DETECTED = 15;
    CARBON_DIOXIDE_LEVEL = 16;
    CARBON_DIOXIDE_PEAK_LEVEL = 17;
    CARBON_MONOXIDE_DETECTED = 18;
    CARBON_MONOXIDE_LEVEL = 19;
    CARBON_MONOXIDE_PEAK_LEVEL = 20;
    CONTACT_STATE = 21;
    CURRENT_HORIZONTAL_TILT = 22;
    CURRENT_POSITION = 23;
    CURRENT_SECURITY_SYSTEM_STATE = 24;
    CURRENT_VERTICAL_TILT = 25;
    HARDWARE_VERSION = 26;
    HOLD_POSITION = 27;
    LEAK_DETECTED = 28;
    OCCUPANCY_DETECTED = 29;
    OUTPUT_STATE = 30;
    POSITION_STATE = 31;
    SOFTWARE_VERSION = 32;
    STATUS_ACTIVE = 33;
    STATUS_FAULT = 34;
    STATUS_JAMMED = 35;
    STATUS_TAMPERED = 36;
    TARGET_HORIZONTAL_TILT = 37;
    TARGET_SECURITY_SYSTEM_STATE = 38;
    TARGET_POSITION = 39;
    TARGET_VERTICAL_TILT = 40;
    STREAMING_STATUS = 41;
    SETUP_STREAM_ENDPOINT = 42;
    SUPPORTED_VIDEO_STREAM_CONFIGURATION = 43;
    SUPPORTED_RT_PCONFIGURATION = 44;
    SELECTED_STREAM_CONFIGURATION = 45;
    OPTICAL_ZOOM = 46;
    DIGITAL_ZOOM = 47;
    IMAGE_ROTATION = 48;
    IMAGE_MIRRORING = 49;
    LABEL_NAMESPACE = 50;
    LABEL_INDEX = 51;
    CURRENT_AIR_PURIFIER_STATE = 52;
    TARGET_AIR_PURIFIER_STATE = 53;
    CURRENT_SLAT_STATE = 54;
    FILTER_CHANGE_INDICATION = 55;
    FILTER_LIFE_LEVEL = 56;
    FILTER_RESET_CHANGE_INDICATION = 57;
    SLAT_TYPE = 58;
    CURRENT_TILT = 59;
    TARGET_TILT = 60;
    OZONE_DENSITY = 61;
    NITROGEN_DIOXIDE_DENSITY = 62;
    SULPHUR_DIOXIDE_DENSITY = 63;
    PM2_5_DENSITY = 64;
    PM10_DENSITY = 65;
    VOLATILE_ORGANIC_COMPOUND_DENSITY = 66;
    PROGRAM_MODE = 67;
    IN_USE = 68;
    SET_DURATION = 69;
    REMAINING_DURATION = 70;
    VALVE_TYPE = 71;
    BRIGHTNESS = 72;
    COOLING_THRESHOLD = 73;
    CURRENT_DOOR_STATE = 74;
    CURRENT_HEATING_COOLING = 75;
    CURRENT_RELATIVE_HUMIDITY = 76;
    CURRENT_TEMPERATURE = 77;
    HEATING_THRESHOLD = 78;
    HUE = 79;
    CURRENT_LOCK_MECHANISM_STATE = 80;
    TARGET_LOCK_MECHANISM_STATE = 81;
    NAME = 82;
    OBSTRUCTION_DETECTED = 83;
    POWER_STATE = 84;
    ROTATION_DIRECTION = 85;
    ROTATION_SPEED = 86;
    SATURATION = 87;
    TARGET_DOOR_STATE = 88;
    TARGET_HEATING_COOLING = 89;
    TARGET_TEMPERATURE = 90;
    TEMPERATURE_UNITS = 91;
    VERSION = 92;
    BATTERY_LEVEL = 93;
    CURRENT_LIGHT_LEVEL = 94;
    INPUT_EVENT = 95;
    SMOKE_DETECTED = 96;
    STATUS_LOW_BATTERY = 97;
    CHARGING_STATE = 98;
    LOCK_PHYSICAL_CONTROLS = 99;
    CURRENT_FAN_STATE = 100;
    ACTIVE = 101;
    CURRENT_HEATER_COOLER_STATE = 102;
    TARGET_HEATER_COOLER_STATE = 103;
    CURRENT_HUMIDIFIER_DEHUMIDIFIER_STATE = 104;
    TARGET_HUMIDIFIER_DEHUMIDIFIER_STATE = 105;
    WATER_LEVEL = 106;
    SWING_MODE = 107;
    TARGET_FAN_STATE = 108;
    DEHUMIDIFIER_THRESHOLD = 109;
    HUMIDIFIER_THRESHOLD = 110;
    COLOR_TEMPERATURE = 111;
    IS_CONFIGURED = 112;
    SUPPORTED_AUDIO_STREAM_CONFIGURATION = 113;
    VOLUME = 114;
    MUTE = 115;
    NIGHT_VISION = 116;
  }

  enum Format {
    INVALID_FORMAT = 0;
    BOOL = 1;
    INT = 2;
    FLOAT = 3;
    STRING = 4;
    ARRAY = 5;
    DICTIONARY = 6;
    UINT8 = 7;
    UINT16 = 8;
    UINT32 = 9;
    UINT64 = 10;
    DATA = 11;
    TLV8 = 12;
  }

  enum Units {
    INVALID_UNITS = 0;
    CELSIUS = 1;
    FAHRENHEIT = 2;
    PERCENTAGE = 3;
    ARC_DEGREE = 4;
    SECONDS = 5;
    LUX = 6;
    PARTS_PER_MILLION = 7;
    MICROGRAMS_PER_CUBIC_METER = 8;
  }

  message Metadata {
    string manufacturer_description = 1;
    repeated Number valid_values = 2;
    /* optional */ Number minimum_value = 3;
    /* optional */ Number maximum_value = 4;
    /* optional */ Number step_value = 5;
    /* optional */ Number max_length = 6;
    /* optional */ Format format = 7;
    /* optional */ Units units = 8;
  }

  string uuid = 1;
  string description = 2;
  repeated Property properties = 3;
  CharacteristicType characteristic_type = 4;
  /* optional */ Metadata metadata = 5;
  /* optional */ Value value = 6;
}

message ServiceInformation {
  string name = 1;
  string uuid = 2;
  ServiceType service_type = 3;
  repeated CharacteristicInformation characteristics = 4;
  bool is_primary = 5;
  bool is_interactive = 6;
  /* optional */ ServiceType associated_service_type = 7;
  repeated NameUuidPair linked_services = 8;
  NameUuidPair accessory = 9;
}

message AccessoryInformation {
  enum Category {
    INVALID_CATEGORY = 0;
    LIGHT_BULB = 1;
    OUTLET = 2;
    PROGRAMMABLE_SWITCH = 3;
    SWITCH = 4;
    FAN = 5;
    AIR_PURIFIER = 6;
    THERMOSTAT = 7;
    AIR_CONDITIONER = 8;
    AIR_DEHUMIDIFIER = 9;
    AIR_HEATER = 10;
    AIR_HUMIDIFIER = 11;
    WINDOW = 12;
    WINDOW_COVERING = 13;
    DOOR = 14;
    DOOR_LOCK = 15;
    GARAGE_DOOR_OPENER = 16;
    VIDEO_DOORBELL = 17;
    SENSOR = 18;
    SECURITY_SYSTEM = 19;
    IP_CAMERA = 20;
    SPRINKLER = 21;
    FAUCET = 22;
    SHOWER_HEAD = 23;
    BRIDGE = 24;
    RANGE_EXTENDER = 25;
    OTHER = 26;
  }

  string name = 1;
  string uuid = 2;
  Category category = 3;
  /* optional */ NameUuidPair room = 4;
  repeated AccessoryProfileInformation profiles = 5;
  bool is_reachable = 6;
  bool is_blocked = 7;
  bool supports_identify = 8;
  repeated ServiceInformation services = 9;
  bool is_bridged = 10;
  repeated string bridged_accessory_uuids = 11;
  string firmware_version = 12;
  string manufacturer = 13;
  string model = 14;
}

message RoomInformation {
  string name = 1;
  string uuid = 2;
  string home = 3;
  repeated NameUuidPair accessories = 4;
}

message ZoneInformation {
  string name = 1;
  string uuid = 2;
  repeated NameUuidPair rooms = 3;
}

message ServiceGroupInformation {
  string name = 1;
  string uuid = 2;
  repeated NameUuidPair services = 3;
}

message ActionSetInformation {
  enum ActionSetType {
    INVALID_ACTION_SET_TYPE = 0;
    HOME_ARRIVAL = 1;
    HOME_DEPARTURE = 2;
    SLEEP = 3;
    WAKE_UP = 4;
    USER_DEFINED = 5;
    TRIGGER_OWNED = 6;
  }

  message CharacteristicAction {
    string uuid = 1;
    CharacteristicInformation characteristic = 2;
    // TODO: figure out how to represent target value 
  }

  message GenericAction {
    string uuid = 1;
  }

  message Action {
    oneof action {
      CharacteristicAction characteristic_action = 1;
      GenericAction generic_action = 2;
    }
  }

  string name = 1;
  string uuid = 2;
  ActionSetType action_set_type = 3;
  repeated Action actions = 4;
  bool is_executing = 5;
}

message CommonTriggerInformation {
  string name = 1;
  string uuid = 2;
  bool is_enabled = 3;
  /* optional */ uint64 last_fire_date = 4;
  repeated NameUuidPair action_sets = 5;
}

enum Weekday {
  INVALID_WEEKDAY = 0;
  WEEKDAY_SUNDAY = 1;
  WEEKDAY_MONDAY = 2;
  WEEKDAY_TUESDAY = 3;
  WEEKDAY_WEDNESDAY = 4;
  WEEKDAY_THURSDAY = 5;
  WEEKDAY_FRIDAY = 6;
  WEEKDAY_SATURDAY = 7;
}

message Coordinate2D {
  double latitude = 1;
  double longitude = 2;
}

message CircularRegion {
  Coordinate2D center = 1;
  double radius = 2;
}

message LocationEventInformation {
  string uuid = 1;
  /* optional */ bool notify_on_entry = 2;
  /* optional */ bool notify_on_exit = 3;
  /* optional */ CircularRegion region = 4;
}

message CalendarEventInformation {
  string uuid = 1;
  uint64 fire_date = 2;
}

enum SignificantEvent {
  INVALID_SIGNIFICANT_EVENT = 0;
  SIGNIFICANT_EVENT_SUNRISE = 1;
  SIGNIFICANT_EVENT_SUNSET = 2;
}

message SignificantTimeEventInformation {
  string uuid = 1;
  SignificantEvent significant_event = 2;
  /* optional */ uint64 offset = 3;
}

message DurationEventInformation {
  string uuid = 1;
  double duration = 2;
}

message CharacteristicEventInformation {
  string uuid = 1;
  NameUuidPair characteristic = 2;
  /* optional */ Value trigger_value = 3;
}

message CharacteristicThresholdRangeEventInformation {
  string uuid = 1;
  NameUuidPair characteristic = 2;
  NumberRange range = 3;
}

enum PresenceEventType {
  INVALID_PRESENCE_EVENT_TYPE = 0;
  PRESENCE_EVENT_TYPE_EVERY_ENTRY = 1;
  PRESENCE_EVENT_TYPE_EVERY_EXIT = 2;
  PRESENCE_EVENT_TYPE_FIRST_ENTRY = 3;
  PRESENCE_EVENT_TYPE_LAST_EXIT = 4;
}

enum PresenceEventUserType {
  INVALID_PRESENCE_EVENT_USER_TYPE = 0;
  PRESENCE_EVENT_USER_TYPE_CURRENT_USER = 1;
  PRESENCE_EVENT_USER_TYPE_HOME_USERS = 2;
  PRESENCE_EVENT_USER_TYPE_CUSTOM_USERS = 3;
}

message PresenceEventInformation {
  string uuid = 1;
  PresenceEventType presence_event = 2;
  PresenceEventUserType presence_user = 3;
}

message EventInformation {
  oneof event {
    LocationEventInformation location_event = 1;
    CalendarEventInformation calendar_event = 2;
    SignificantTimeEventInformation significant_time_event = 3;
    DurationEventInformation duration_event = 4;
    CharacteristicEventInformation characteristic_event = 5;
    CharacteristicThresholdRangeEventInformation characteristic_threshold_range_event = 6;
    PresenceEventInformation presence_event = 7;
  }
}

message EventTriggerInformation {
  enum ActivationState {
    INVALID_ACTIVATION_STATE = 0;
    EVENT_TRIGGER_DISABLED = 1;
    EVENT_TRIGGER_DISABLED_NO_COMPATIBLE_HOME_HUB = 2;
    EVENT_TRIGGER_DISABLED_NO_HOME_HUB = 3;
    EVENT_TRIGGER_DISABLED_NO_LOCATION_SERVICES_AUTHORIZATION = 4;
    EVENT_TRIGGER_ENABLED = 5;
  }

  CommonTriggerInformation trigger = 1;
  ActivationState activation_state = 2;
  repeated EventInformation events = 3;
  repeated EventInformation end_events = 4;
  repeated Weekday recurrences = 5;
  bool executes_once = 6;
  // TODO: figure out how to represent predicates
}

message TimerTriggerInformation {
  CommonTriggerInformation trigger = 1;
  uint64 fire_date = 2;
  /* optional */ uint64 recurrence = 3;
}

message TriggerInformation {
  oneof trigger {
    EventTriggerInformation event = 1;
    TimerTriggerInformation timer = 2;
  }
}

message HomeInformation {
  enum HomeHubState {
    INVALID_HOME_HUB_STATE = 0;
    CONNECTED = 1;
    DISCONNECTED = 2;
    NOT_AVAILABLE = 3;
  }

  string name = 1;
  string uuid = 2;
  bool is_primary = 3;
  HomeHubState hub_state = 4;
  repeated NameUuidPair accessories = 5;
  repeated NameUuidPair rooms = 6;
  repeated NameUuidPair zones = 7;
  repeated NameUuidPair service_groups = 8;
  repeated NameUuidPair action_sets = 9;
  repeated NameUuidPair triggers = 10;
}

message EnumerateHomesRequest {
  string name_filter = 1;
}

message EnumerateHomesResponse {
  repeated HomeInformation homes = 1;
}

message EnumerateRoomsRequest {
  string home = 1;
  string name_filter = 2;
}

message EnumerateRoomsResponse {
  NameUuidPair home = 1;
  repeated RoomInformation rooms = 2;
}

message EnumerateZonesRequest {
  string home = 1;
  string room_filter = 3;
  string name_filter = 2;
}

message EnumerateZonesResponse {
  NameUuidPair home = 1;
  repeated ZoneInformation zones = 2;
}

message EnumerateAccessoriesRequest {
  string home = 1;
  string zone_filter = 2;
  string room_filter = 3;
  string name_filter = 4;
}

message EnumerateAccessoriesResponse {
  NameUuidPair home = 1;
  repeated AccessoryInformation accessories = 2;
}

message EnumerateServiceGroupsRequest {
  string home = 1;
  string name_filter = 2;
}

message EnumerateServiceGroupsResponse {
  NameUuidPair home = 1;
  repeated ServiceGroupInformation service_groups = 2;
}

message EnumerateServicesRequest {
  string home = 1;
  repeated ServiceType types = 2;
  string name_filter = 3;
}

message EnumerateServicesResponse {
  NameUuidPair home = 1;
  repeated ServiceInformation services = 2;
}

message EnumerateActionSetsRequest {
  string home = 1;
  string name_filter = 2;
}

message EnumerateActionSetsResponse {
  NameUuidPair home = 1;
  repeated ActionSetInformation action_sets = 2;
}

message EnumerateTriggersRequest {
  enum EnabledFilter {
    NO_FILTER = 0;
    ENABLED_ONLY = 1;
    DISABLED_ONLY = 2;
  }

  string home = 1;
  string name_filter = 2;
  /* optional */ EnabledFilter enabled_filter = 3;
  uint64 before = 4;
  uint64 after = 5;
}

message EnumerateTriggersResponse {
  NameUuidPair home = 1;
  repeated TriggerInformation triggers = 2;
}

service HomeKitService {
  rpc EnumerateHomes(EnumerateHomesRequest) returns (EnumerateHomesResponse);
  rpc EnumerateRooms(EnumerateRoomsRequest) returns (EnumerateRoomsResponse);
  rpc EnumerateZones(EnumerateZonesRequest) returns (EnumerateZonesResponse);
  rpc EnumerateAccessories(EnumerateAccessoriesRequest) returns (EnumerateAccessoriesResponse);
  rpc EnumerateServiceGroups(EnumerateServiceGroupsRequest) returns (EnumerateServiceGroupsResponse);
  rpc EnumerateServices(EnumerateServicesRequest) returns (EnumerateServicesResponse);
  rpc EnumerateActionSets(EnumerateActionSetsRequest) returns (EnumerateActionSetsResponse);
  rpc EnumerateTriggers(EnumerateTriggersRequest) returns (EnumerateTriggersResponse);
}
